# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChoiceAnswer {
  id: ID!
  content: String!
  is_correct: Boolean!
  question: Question!
}

type SortingAnswer {
  id: ID!
  content: String!
  order: Float!
  question: Question!
}

type TextAnswer {
  id: ID!
  content: String!
  question: Question!
}

type Question {
  id: ID!
  content: String!
  max_points: Float!
  question_type: QuestionTypeEnum!
  quiz_id: Int!
  quiz: Quiz!
  choice_answers: [ChoiceAnswer!]
  sorting_answers: [SortingAnswer!]
  text_answers: [TextAnswer!]
  attempts_questions: [AttemptQuestion!]!
}

enum QuestionTypeEnum {
  CHOICE
  TEXT
  SORTING
}

type AttemptQuestion {
  id: ID!
  points_scored: Float
  answer: String
  attempt: Attempt!
  question: Question!
}

type Attempt {
  id: ID!
  opens_at: DateTime
  time_limit: String
  finished_at: DateTime
  user_id: Int!
  user: User!
  quiz_id: Int!
  quiz: Quiz!
  attempts_questions: AttemptQuestion!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Quiz {
  id: ID!
  name: String!
  created_at: DateTime
  user_id: Int!
  user: User!
  attempts: [Attempt!]
  questions: [Question!]!
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  full_name: String!
  user_role: UserRoleEnum!
  quizzes: [Quiz!]!
  attempts: Attempt!
}

enum UserRoleEnum {
  TEACHER
  STUDENT
}

type Query {
  findAllUsers: [User!]!
  findOneUser(id: Int!): User!
  findAllAttempts: [Attempt!]!
  findAllChoiceAnswers: [ChoiceAnswer!]!
  findOneChoiceAnswer: ChoiceAnswer!
  findAllSortingAnswers: [SortingAnswer!]!
  findOneSortingAnswer: SortingAnswer!
  findAllTextAnswers: [TextAnswer!]!
  findOneTextAnswer: TextAnswer!
}

type Mutation {
  createUser(createUserDto: CreateUserDto!): User!
  removeUser(id: Int!): User
  createQuiz(createQuizDto: CreateQuizDto!): Quiz!
  createAttempt(crateAttemptDto: CreateAttemptDto!): Attempt!
}

input CreateUserDto {
  username: String!
  email: String!
  password: String!
  full_name: String!
  user_role: UserRoleEnum!
}

input CreateQuizDto {
  user_id: Int!
  name: String!
  questionsDto: [CreateQuestionDto!]!
}

input CreateQuestionDto {
  content: String!
  question_type: QuestionTypeEnum!
  max_points: Float!
  choiceAnswersDto: [CreateChoiceAnswerDto]
  sortingAnswersDto: [CreateSortingAnswerDto]
  textAnswersDto: [CreateTextAnswerDto]
}

input CreateChoiceAnswerDto {
  content: String!
  is_correct: Boolean!
}

input CreateSortingAnswerDto {
  content: String!
  order: Int!
}

input CreateTextAnswerDto {
  content: String!
}

input CreateAttemptDto {
  user_id: Int!
  quiz_id: Int!
  opens_at: DateTime
  time_limit: String
}